#+PROPERTY: header-args:sql     :exports both
#+PROPERTY: header-args:sql+    :engine postgresql
#+PROPERTY: header-args:sql+    :dbhost localhost
#+PROPERTY: header-args:sql+    :dbuser postgres
#+PROPERTY: header-args:sql+    :dbpassword akvo
#+PROPERTY: header-args:sql+    :database unep
#+STARTUP: showall

#+begin_src sql
DROP TABLE IF EXISTS geo_coverage CASCADE;
CREATE TABLE geo_coverage (
  id serial NOT NULL PRIMARY KEY,
  geo text NOT NULL UNIQUE
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

#+begin_src sql
DROP TABLE IF EXISTS country CASCADE;
CREATE TABLE country (
  id serial NOT NULL PRIMARY KEY,
  "name" text NOT NULL UNIQUE
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |


#+begin_src sql
DROP TABLE IF EXISTS stakeholder CASCADE;
CREATE TABLE stakeholder (
  id serial NOT NULL PRIMARY KEY,
  picture text,
  title text,
  first_name text NOT NULL,
  last_name text NOT NULL,
  affiliation text NOT NULL,
  email text NOT NULL UNIQUE,
  linkedin text,
  twitter text,
  url text,
  country integer REFERENCES country(id),
  representation text NOT NULL,
  summary text,
  geo_coverage integer REFERENCES geo_coverage(id)
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |


#+begin_src sql
\d stakeholder
#+end_src

#+RESULTS:
| Table "public.stakeholder"                                                             |         |           |          |                                         |
|----------------------------------------------------------------------------------------+---------+-----------+----------+-----------------------------------------|
| Column                                                                                 | Type    | Collation | Nullable | Default                                 |
| id                                                                                     | integer |           | not null | nextval('stakeholder_id_seq'::regclass) |
| picture                                                                                | text    |           |          |                                         |
| title                                                                                  | text    |           |          |                                         |
| first_name                                                                             | text    |           | not null |                                         |
| last_name                                                                              | text    |           | not null |                                         |
| affiliation                                                                            | text    |           | not null |                                         |
| email                                                                                  | text    |           | not null |                                         |
| linkedin                                                                               | text    |           |          |                                         |
| twitter                                                                                | text    |           |          |                                         |
| url                                                                                    | text    |           |          |                                         |
| country                                                                                | integer |           |          |                                         |
| representation                                                                         | text    |           | not null |                                         |
| summary                                                                                | text    |           |          |                                         |
| geo_coverage                                                                           | integer |           |          |                                         |
| Indexes:                                                                               |         |           |          |                                         |
| "stakeholder_pkey" PRIMARY KEY, btree (id)                                             |         |           |          |                                         |
| "stakeholder_email_key" UNIQUE CONSTRAINT, btree (email)                               |         |           |          |                                         |
| Foreign-key constraints:                                                               |         |           |          |                                         |
| "stakeholder_country_fkey" FOREIGN KEY (country) REFERENCES country(id)                |         |           |          |                                         |
| "stakeholder_geo_coverage_fkey" FOREIGN KEY (geo_coverage) REFERENCES geo_coverage(id) |         |           |          |                                         |


#+begin_src sql
DROP TABLE IF EXISTS event CASCADE;
CREATE TABLE event (
  id serial NOT NULL PRIMARY KEY,
  title text NOT NULL,
  start_date timestamptz NOT NULL,
  end_date timestamptz NOT NULL,
  description text NOT NULL,
  url text,
  languages text[] NOT NULL, --?
  geo_coverage integer REFERENCES geo_coverage(id),
  remarks text
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

#+begin_src sql
DROP TYPE IF EXISTS rel_type CASCADE;
CREATE TYPE rel_type AS
ENUM ('owner', 'user', 'reviewer', 'interested in', 'other');
#+end_src

#+RESULTS:
| DROP TYPE   |
|-------------|
| CREATE TYPE |

#+begin_src sql
DROP TABLE IF EXISTS stakeholder_event;
CREATE TABLE stakeholder_event (
  stakeholder_id integer NOT NULL REFERENCES stakeholder(id),
  event_id integer NOT NULL REFERENCES event(id),
  rel_type rel_type NOT NULL,
  PRIMARY KEY (stakeholder_id, event_id, rel_type)
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

#+begin_src sql
\d stakeholder_event
#+end_src

#+RESULTS:
| Table "public.stakeholder_event"                                                                |          |           |          |         |
|-------------------------------------------------------------------------------------------------+----------+-----------+----------+---------|
| Column                                                                                          | Type     | Collation | Nullable | Default |
| stakeholder_id                                                                                  | integer  |           | not null |         |
| event_id                                                                                        | integer  |           | not null |         |
| rel_type                                                                                        | rel_type |           | not null |         |
| Indexes:                                                                                        |          |           |          |         |
| "stakeholder_event_pkey" PRIMARY KEY, btree (stakeholder_id, event_id, rel_type)                |          |           |          |         |
| Foreign-key constraints:                                                                        |          |           |          |         |
| "stakeholder_event_event_id_fkey" FOREIGN KEY (event_id) REFERENCES event(id)                   |          |           |          |         |
| "stakeholder_event_stakeholder_id_fkey" FOREIGN KEY (stakeholder_id) REFERENCES stakeholder(id) |          |           |          |         |

#+begin_src sql
DROP TABLE IF EXISTS tag_category CASCADE;
CREATE TABLE tag_category (
  id serial NOT NULL PRIMARY KEY,
  category text NOT NULL UNIQUE
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

#+begin_src sql
DROP TABLE IF EXISTS tag CASCADE;
CREATE TABLE tag (
  id serial NOT NULL PRIMARY KEY,
  tag_category integer NOT NULL REFERENCES tag_category(id),
  tag text NOT NULL
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |


#+begin_src sql
DROP TABLE IF EXISTS resource CASCADE;
CREATE TABLE resource (
  id serial NOT NULL PRIMARY KEY,
  title text,
  organisations text[], -- based on stakeholder affiliation; there's also
                         -- organisation type used in technologies
  type text, -- enum?
  publish_year integer,
  summary text,
  country integer REFERENCES country(id),
  url text,
  value float,  -- change to text? needs currency
  image text,
  valid_from date,
  valid_to date,
  languages text[],
  geo_coverage integer REFERENCES geo_coverage(id),
  attachments text[],
  remarks text
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

We could create a ~tag_entity~ table instead of multiple ~~tag_*~ tables and use
polymorphism by using an ~entity_type~ column, but DB consistency is much harder
to maintain, and doesn't seem to give us a lot of gains. GitLab developer docs
have a [[https://docs.gitlab.com/ee/development/polymorphic_associations.html][document]] on thier policy for polymorphic associations.

The other option would be to create a ~tag_entity~ table with separate columns
for each kind of entity - stakeholder, resource, ... and add a [[https://hashrocket.com/blog/posts/modeling-polymorphic-associations-in-a-relational-database#exclusive-belongs-to-aka-exclusive-arc-][check]] that
ensures that only one of these columns has a value in each row of the table.

#+BEGIN_SRC sql
  check(
    (
      (stakeholder_id is not null)::integer +
      (resource_id is not null)::integer
      -- + ...
    ) = 1
  )
#+END_SRC

#+begin_src sql
DROP TABLE IF EXISTS tag_resource CASCADE;
CREATE TABLE tag_resource (
  id serial NOT NULL PRIMARY KEY,
  tag integer NOT NULL REFERENCES tag(id),
  resource integer NOT NULL REFERENCES resource(id)
);
#+end_src

#+RESULTS:
| DROP TABLE   |
|--------------|
| CREATE TABLE |

* Inserting some data

#+begin_src sql
INSERT INTO geo_coverage(geo) VALUES('global'), ('regional'), ('national');
#+end_src

#+RESULTS:
| INSERT 0 3 |
|------------|


#+begin_src sql
select * from geo_coverage
#+end_src

#+RESULTS:
| id | geo      |
|----+----------|
|  1 | global   |
|  2 | regional |
|  3 | national |


#+begin_src sql
INSERT INTO country(name) VALUES ('India'), ('Kenya');
#+end_src

#+RESULTS:
| INSERT 0 2 |
|------------|

#+begin_src sql
SELECT * FROM country
#+end_src

#+RESULTS:
| id | name  |
|----+-------|
|  1 | India |
|  2 | Kenya |

#+begin_src sql
INSERT INTO stakeholder (title, first_name, last_name,
                         affiliation, linkedin, email,
                         country, representation)
VALUES ('Mr.', 'S', 'R', 'UNEP',
        'https://www.linkedin.com/in/s-r-b123/',
        's.r@un.org', 1, 'UN');
#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|

#+begin_src sql
select * from stakeholder
#+end_src

#+RESULTS:
| id | picture | title | first_name | last_name | affiliation | email      | linkedin                              | twitter | url | country | representation | summary | geo_coverage |
|----+---------+-------+------------+-----------+-------------+------------+---------------------------------------+---------+-----+---------+----------------+---------+--------------|
|  1 |         | Mr.   | S          | R         | UNEP        | s.r@un.org | https://www.linkedin.com/in/s-r-b123/ |         |     |       1 | UN             |         |              |

#+begin_src sql
INSERT INTO stakeholder(title, first_name, last_name, affiliation,
                        linkedin, email, country, representation,
                        summary, geo_coverage)
VALUES ('Ms.', 'C', 'P', 'UNEP', 'https://www.linkedin.com/in/c-p',
        'c.p@un.org', 2, 'UN', 'Machine Learning Developer', 3),
       ('Ms.', 'M', 'N', 'UNEP', 'https://www.linkedin.com/in/m-n/', 'm.n@un.org',
        1, 'UN', 'Product and Knowledge Manager at UN Environment Programme', null);
#+end_src

#+RESULTS:
| INSERT 0 2 |
|------------|


#+begin_src sql
select * from stakeholder
#+end_src

#+RESULTS:
| id | picture | title | first_name | last_name | affiliation | email      | linkedin                              | twitter | url | country | representation | summary                                                   | geo_coverage |
|----+---------+-------+------------+-----------+-------------+------------+---------------------------------------+---------+-----+---------+----------------+-----------------------------------------------------------+--------------|
|  1 |         | Mr.   | S          | R         | UNEP        | s.r@un.org | https://www.linkedin.com/in/s-r-b123/ |         |     |       1 | UN             |                                                           |              |
|  2 |         | Ms.   | C          | P         | UNEP        | c.p@un.org | https://www.linkedin.com/in/c-p       |         |     |       2 | UN             | Machine Learning Developer                                |            3 |
|  3 |         | Ms.   | M          | N         | UNEP        | m.n@un.org | https://www.linkedin.com/in/m-n/      |         |     |       1 | UN             | Product and Knowledge Manager at UN Environment Programme |              |


#+begin_src sql
INSERT INTO event (title, start_date, end_date, description, languages, geo_coverage)
VALUES('Towards a GPML digital platform', now(), now(), 'The webinar "Towards a GPML Digital Platform” offered a high-level overview of the forthcoming GPML Digital Platform, as well as an opportunity to discuss multi-stakeholder functionalities, the data aspects and feedback.', '{"English"}', 3);
#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|

#+begin_src sql
SELECT * FROM event
#+end_src

#+RESULTS:
| id | title                           | start_date                    | end_date                      | description                                                                                                                                                                                                                  | url | languages | geo_coverage | remarks |
|----+---------------------------------+-------------------------------+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----+-----------+--------------+---------|
|  1 | Towards a GPML digital platform | 2021-01-05 11:22:40.688528+00 | 2021-01-05 11:22:40.688528+00 | The webinar "Towards a GPML Digital Platform” offered a high-level overview of the forthcoming GPML Digital Platform, as well as an opportunity to discuss multi-stakeholder functionalities, the data aspects and feedback. |     | {English} |            3 |         |

#+begin_src sql
INSERT INTO tag_category(category) VALUES('general'), ('technology');
#+end_src

#+RESULTS:
| INSERT 0 2 |
|------------|


#+begin_src sql
SELECT * FROM tag_category;
#+end_src

#+RESULTS:
| id | category   |
|----+------------|
|  1 | general    |
|  2 | technology |

#+begin_src sql
INSERT INTO tag(tag_category, tag)
VALUES (1, 'beach cleanup'),
(1, 'fishing gear'),
(2, 'data science'),
(2, 'spatial data science');
#+end_src

#+RESULTS:
| INSERT 0 4 |
|------------|


#+begin_src sql
SELECT * FROM tag
#+end_src

#+RESULTS:
| id | tag_category | tag                  |
|----+--------------+----------------------|
|  1 |            1 | beach cleanup        |
|  2 |            1 | fishing gear         |
|  3 |            2 | data science         |
|  4 |            2 | spatial data science |


#+RESULTS:
| DROP TYPE   |
|-------------|
| CREATE TYPE |

#+begin_src sql
INSERT INTO stakeholder_event(stakeholder_id, event_id, rel_type)
VALUES(1, 1, 'interested in');
#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|

#+begin_src sql
SELECT s.email, e.title, se.rel_type
  FROM stakeholder s, event e, stakeholder_event se
WHERE s.id = se.stakeholder_id
  AND e.id = se.event_id
  AND se.rel_type = 'interested in'
#+end_src

#+RESULTS:
| email      | title                           | rel_type      |
|------------+---------------------------------+---------------|
| s.r@un.org | Towards a GPML digital platform | interested in |


#+begin_src sql
INSERT INTO resource (title, organisations, type, summary, country, url, value, languages, geo_coverage)
VALUES('Closed Loop Infrastructure Fund', '{"Amazon", "3M", "Coca Cola"}', 'Financial Resource', 'The loans are targeted at projects that will develop local recycling infrastructure.', 1, 'https://www.closedlooppartners.com/', 100000000, '{"English"}', 1);
#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|


#+begin_src sql
SELECT * FROM resource
#+end_src

#+RESULTS:
| id | title                           | organisations           | type               | publish_year | country | summary                                                                              | url                                 |     value | image | valid_from | valid_to | languages | geo_coverage | attachments | remarks |
|----+---------------------------------+-------------------------+--------------------+--------------+---------+--------------------------------------------------------------------------------------+-------------------------------------+-----------+-------+------------+----------+-----------+--------------+-------------+---------|
|  1 | Closed Loop Infrastructure Fund | {Amazon,3M,"Coca Cola"} | Financial Resource |              |       1 | The loans are targeted at projects that will develop local recycling infrastructure. | https://www.closedlooppartners.com/ | 100000000 |       |            |          | {English} |            1 |             |         |


#+begin_src sql
INSERT INTO tag_resource(tag, resource)
VALUES (1, 1),
        (2, 1),
        (4, 1);
#+end_src

#+RESULTS:
| INSERT 0 3 |
|------------|

#+begin_src sql
SELECT * FROM tag_resource
#+end_src

#+RESULTS:
| id | tag | resource |
|----+-----+----------|
|  1 |   1 |        1 |
|  2 |   2 |        1 |
|  3 |   4 |        1 |
